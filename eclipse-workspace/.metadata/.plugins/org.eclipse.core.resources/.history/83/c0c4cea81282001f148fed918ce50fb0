package com.websocket;

import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import com.google.gson.Gson;

// Queue to store messages
class MessageQueue {
	public static Queue<String> queue = new LinkedList<>();

	public static void addMessage(String message) {
		System.out.println("Data to store in the queue: " + message);
		queue.add(message);
	}

	public static String getMessage() {
		return queue.poll(); // Get and remove the head of the queue
	}
}

// Message class to represent the message structure
class Message {
	private String type;
	private String content;

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Override
	public String toString() {
		return "Message{type='" + type + "', content='" + content + "'}";
	}
}

@ServerEndpoint("/clientws")
public class Clientcode {

	// Gson instance to parse JSON
	private static Gson gson = new Gson();

	@OnOpen
	public void onOpen(Session session) throws IOException {
		System.out.println("WebSocket connection opened in clientws!");

		// Simulate processing and getting the message from the queue
		String response = MessageQueue.getMessage();

		if (response == null) {
			response = "No message in the queue.";
		}

		// Convert the response to JSON
		String jsonResponse = gson.toJson(response);

		// Send the response back to the client in JSON format
		session.getBasicRemote().sendText(jsonResponse);
	}

	@OnMessage
	public void onMessage(String jsonMessage, Session session) throws IOException {
		System.out.println("Message received in clientws: " + jsonMessage);

		// Parse the JSON message into the Message class
		Message message = gson.fromJson(jsonMessage, Message.class);
		if (message == null) {
			System.out.println("Invalid message received, cannot parse JSON.");
			return;
		}

		System.out.println("Parsed JSON to Message object: " + message);

		// Store the message in the queue (for example purposes)
		MessageQueue.addMessage(message.getContent());

		// Convert the message object back to JSON to send it as a response
		String jsonResponse = gson.toJson(message);

		// Respond back to the client with a JSON message
		session.getBasicRemote().sendText(jsonResponse);
	}

	@OnClose
	public void onClose(Session session) {
		System.out.println("WebSocket connection closed in clientws!");
	}

	@OnError
	public void onError(Session session, Throwable throwable) {
		System.err.println("WebSocket error: " + throwable.getMessage());
	}
}
