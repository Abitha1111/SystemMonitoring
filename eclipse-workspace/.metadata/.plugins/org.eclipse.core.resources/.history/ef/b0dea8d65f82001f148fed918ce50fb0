package com.websocket;

import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

@ServerEndpoint("/serverws")
public class ServerWebSocket {

    // A thread-safe set to store active sessions
    private static Set<Session> clients = new CopyOnWriteArraySet<>();

    @OnOpen
    public void onOpen(Session session) {
        clients.add(session); // Add new session to the set
        System.out.println("WebSocket connection opened for session ID: " + session.getId());
    }

    @OnMessage
    public void onMessage(String message, Session session) {
        System.out.println("Received message: " + message + " from session ID: " + session.getId());

        try {
            // Save the message to the database (assumes you have a working DatabaseManager)
            DatabaseManager.saveMessage(message);

            // Add the received message to a queue (if applicable, assuming MessageQueue exists)
            MessageQueue.addMessage(message);

            // Broadcast the message to all connected clients
            broadcastMessage(message);
        } catch (Exception e) {
            System.err.println("Error processing message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @OnClose
    public void onClose(Session session) {
        clients.remove(session); // Remove the session when closed
        System.out.println("WebSocket connection closed for session ID: " + session.getId());
    }

    @OnError
    public void onError(Session session, Throwable throwable) {
        System.err.println("WebSocket error in session ID: " + session.getId() + ", error: " + throwable.getMessage());
        throwable.printStackTrace();
    }

    // Method to broadcast a message to all connected clients
    private void broadcastMessage(String message) {
        for (Session client : clients) {
            if (client.isOpen()) {
                try {
                    client.getBasicRemote().sendText(message);
                } catch (Exception e) {
                    System.err.println("Error sending message to session ID: " + client.getId() + ": " + e.getMessage());
                    e.printStackTrace();
                }
            }
        }
    }
}
