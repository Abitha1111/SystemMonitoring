package websocket;
	import org.java_websocket.client.WebSocketClient;
	import org.java_websocket.handshake.ServerHandshake;
	import com.google.gson.JsonObject;
	import com.google.gson.Gson;

	import java.net.URI;
	import java.net.URISyntaxException;

	public class Socketconnection extends WebSocketClient {

	    private Gson gson = new Gson(); // Gson instance to convert Java objects to JSON

	    public Socketconnection(URI serverURI) {
	        super();
	    }

	    @Override
	    public void onOpen(ServerHandshake handshake) {
	        System.out.println("Connected to WebSocket server");

	        // Create a JSON object to send
	        JsonObject jsonObject = new JsonObject();
	        jsonObject.addProperty("action", "subscribe");
	        jsonObject.addProperty("user", "sasi");

	        // Convert the JSON object to a string
	        String jsonString = gson.toJson(jsonObject);

	        // Send the JSON data
	        send(jsonString);
	        System.out.println("Sent JSON data: " + jsonString);
	    }

	    @Override
	    public void onMessage(String message) {
	        // Handle the message received from the server (optional)
	        System.out.println("Received message: " + message);
	    }

	    @Override
	    public void onClose(int code, String reason, boolean remote) {
	        System.out.println("Connection closed. Code: " + code + " Reason: " + reason);
	    }

	    @Override
	    public void onError(Exception ex) {
	        ex.printStackTrace();
	    }

	    public static void main(String[] args) {
	        try {
	            // Replace with your WebSocket server URL
	            URI uri = new URI("ws://example.com/websocket");
	            Socketconnection client = new Socketconnection(uri);

	            // Connect to the WebSocket server
	            client.connectBlocking();  // Wait for the connection to be established

	            // Optionally, you can send more data later after the connection is open
	            JsonObject additionalData = new JsonObject();
	            additionalData.addProperty("type", "ping");
	            additionalData.addProperty("timestamp", System.currentTimeMillis());
	            client.send(client.gson.toJson(additionalData));

	        } catch (URISyntaxException | InterruptedException e) {
	            e.printStackTrace();
	        }
	    }
	}

}
